{"ast":null,"code":"import * as types from './../constants/ActionTypes';\nimport config from './../config/index';\nimport axios from 'axios';\nlet initialState = [];\ninitialState = localStorage.getItem(\"domain\"); // axios({\n//     url: `${config.baseUrl}/api/get-all`,\n//     method: 'get'\n//     })\n//     .then((response) => {\n//         initialState = response.data.data;\n//     })\n//     .catch((error) => {\n//         console.log(error)\n//     });\n\nlet myReducer = (state = initialState, action) => {\n  let newState = [...initialState];\n  let listArray = [...initialState];\n\n  switch (action.type) {\n    case types.UPLOAD_SUCCESS:\n      if (action.data.message === \"upload-success\") {\n        initialState = [...initialState, action.data.data];\n      } else if (action.data.message === \"edit-success\") {\n        initialState[action.data.temp] = action.data.data;\n      }\n\n      return initialState;\n\n    case types.DEL_SUCCESS:\n      if (action.data.message === \"delete-success\") {\n        action.listData.forEach(element => {\n          initialState.splice(element, element);\n        });\n      }\n\n      return initialState;\n\n    case types.SHOW_ALL:\n      return newState;\n\n    case types.SHOW_MODEL:\n      listArray = newState.filter((item, index) => {\n        if (item.model === 1) {\n          return true;\n        } else return false;\n      });\n      return listArray;\n\n    case types.SHOW_GOOD:\n      listArray = newState.filter((item, index) => {\n        if (item.good === 1) {\n          return true;\n        } else return false;\n      });\n      return listArray;\n\n    default:\n      return newState;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/thispc/Documents/TTS/app-react-1/font-end/src/reducers/sort.js"],"names":["types","config","axios","initialState","localStorage","getItem","myReducer","state","action","newState","listArray","type","UPLOAD_SUCCESS","data","message","temp","DEL_SUCCESS","listData","forEach","element","splice","SHOW_ALL","SHOW_MODEL","filter","item","index","model","SHOW_GOOD","good"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAIC,YAAY,GAAE,EAAlB;AACAA,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAsBK,MAAtB,KAAiC;AAE7C,MAAIC,QAAQ,GAAG,CAAC,GAAGN,YAAJ,CAAf;AACA,MAAIO,SAAS,GAAG,CAAC,GAAGP,YAAJ,CAAhB;;AACA,UAAOK,MAAM,CAACG,IAAd;AACI,SAAKX,KAAK,CAACY,cAAX;AACI,UAAGJ,MAAM,CAACK,IAAP,CAAYC,OAAZ,KAAwB,gBAA3B,EAA4C;AACxCX,QAAAA,YAAY,GAAG,CAAC,GAAGA,YAAJ,EAAiBK,MAAM,CAACK,IAAP,CAAYA,IAA7B,CAAf;AACH,OAFD,MAGK,IAAGL,MAAM,CAACK,IAAP,CAAYC,OAAZ,KAAwB,cAA3B,EAA0C;AAC3CX,QAAAA,YAAY,CAACK,MAAM,CAACK,IAAP,CAAYE,IAAb,CAAZ,GAAiCP,MAAM,CAACK,IAAP,CAAYA,IAA7C;AACH;;AACD,aAAOV,YAAP;;AACJ,SAAKH,KAAK,CAACgB,WAAX;AACI,UAAGR,MAAM,CAACK,IAAP,CAAYC,OAAZ,KAAwB,gBAA3B,EAA4C;AACxCN,QAAAA,MAAM,CAACS,QAAP,CAAgBC,OAAhB,CAAwBC,OAAO,IAAI;AAC/BhB,UAAAA,YAAY,CAACiB,MAAb,CAAoBD,OAApB,EAA4BA,OAA5B;AACH,SAFD;AAGH;;AACD,aAAOhB,YAAP;;AAEJ,SAAKH,KAAK,CAACqB,QAAX;AACI,aAAOZ,QAAP;;AACJ,SAAKT,KAAK,CAACsB,UAAX;AACIZ,MAAAA,SAAS,GAAGD,QAAQ,CAACc,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACtC,YAAGD,IAAI,CAACE,KAAL,KAAe,CAAlB,EAAqB;AACjB,iBAAO,IAAP;AACH,SAFD,MAGK,OAAO,KAAP;AACJ,OALO,CAAZ;AAMI,aAAOhB,SAAP;;AACR,SAAKV,KAAK,CAAC2B,SAAX;AACIjB,MAAAA,SAAS,GAAGD,QAAQ,CAACc,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACtC,YAAGD,IAAI,CAACI,IAAL,KAAc,CAAjB,EAAoB;AAChB,iBAAO,IAAP;AACH,SAFD,MAGK,OAAO,KAAP;AACJ,OALO,CAAZ;AAMI,aAAOlB,SAAP;;AACR;AAAU,aAAOD,QAAP;AAnCd;AAqCH,CAzCD;;AA2CA,eAAeH,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes'\nimport config from './../config/index'\nimport axios from 'axios';\n\nlet initialState =[];\ninitialState = localStorage.getItem(\"domain\")\n// axios({\n//     url: `${config.baseUrl}/api/get-all`,\n//     method: 'get'\n//     })\n//     .then((response) => {\n//         initialState = response.data.data;\n//     })\n//     .catch((error) => {\n//         console.log(error)\n//     });\n\nlet myReducer = (state = initialState,action) => {\n\n    let newState = [...initialState];\n    let listArray = [...initialState];\n    switch(action.type){\n        case types.UPLOAD_SUCCESS:\n            if(action.data.message === \"upload-success\"){\n                initialState = [...initialState,action.data.data]\n            }\n            else if(action.data.message === \"edit-success\"){\n                initialState[action.data.temp] = action.data.data;\n            }\n            return initialState;\n        case types.DEL_SUCCESS :\n            if(action.data.message === \"delete-success\"){\n                action.listData.forEach(element => {\n                    initialState.splice(element,element)\n                });\n            }\n            return initialState;\n\n        case types.SHOW_ALL:\n            return newState;\n        case types.SHOW_MODEL:\n            listArray = newState.filter((item,index)=>{\n                if(item.model === 1) {\n                    return true\n                }  \n                else return false;\n                })\n                return listArray;\n        case types.SHOW_GOOD:\n            listArray = newState.filter((item,index)=>{\n                if(item.good === 1) {\n                    return true\n                }  \n                else return false;\n                })\n                return listArray;\n        default : return newState;\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}