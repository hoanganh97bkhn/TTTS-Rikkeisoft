{"ast":null,"code":"import * as types from './../constants/ActionTypes';\nimport config from './../config/index';\nimport axios from 'axios';\nlet initialState = [];\naxios({\n  url: \"\".concat(config.baseUrl, \"/api/get-all\"),\n  method: 'get'\n}).then(response => {\n  initialState = response.data.data;\n}).catch(error => {\n  console.log(error);\n});\n\nlet myReducer = (state = initialState, action) => {\n  let newState = [...initialState];\n  let listArray = [...initialState];\n\n  switch (action.type) {\n    case types.SHOW_ALL:\n      return newState;\n\n    case types.SHOW_MODEL:\n      listArray = newState.filter((item, index) => {\n        if (item.model === 1) {\n          return true;\n        } else return false;\n      });\n      return listArray;\n\n    case types.SHOW_GOOD:\n      listArray = newState.filter((item, index) => {\n        if (item.good === 1) {\n          return true;\n        } else return false;\n      });\n      return listArray;\n\n    default:\n      return newState;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/thispc/Documents/TTS/app-react-1/font-end/src/reducers/sort.js"],"names":["types","config","axios","initialState","url","baseUrl","method","then","response","data","catch","error","console","log","myReducer","state","action","newState","listArray","type","SHOW_ALL","SHOW_MODEL","filter","item","index","model","SHOW_GOOD","good"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAIC,YAAY,GAAG,EAAnB;AACAD,KAAK,CAAC;AACFE,EAAAA,GAAG,YAAKH,MAAM,CAACI,OAAZ,iBADD;AAEFC,EAAAA,MAAM,EAAE;AAFN,CAAD,CAAL,CAIKC,IAJL,CAIWC,QAAD,IAAc;AAChBL,EAAAA,YAAY,GAAGK,QAAQ,CAACC,IAAT,CAAcA,IAA7B;AAEH,CAPL,EAQKC,KARL,CAQYC,KAAD,IAAW;AACdC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,CAVL;;AAYA,IAAIG,SAAS,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAsBa,MAAtB,KAAiC;AAE7C,MAAIC,QAAQ,GAAG,CAAC,GAAGd,YAAJ,CAAf;AACA,MAAIe,SAAS,GAAG,CAAC,GAAGf,YAAJ,CAAhB;;AACA,UAAOa,MAAM,CAACG,IAAd;AACI,SAAKnB,KAAK,CAACoB,QAAX;AACI,aAAOH,QAAP;;AACJ,SAAKjB,KAAK,CAACqB,UAAX;AACIH,MAAAA,SAAS,GAAGD,QAAQ,CAACK,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACtC,YAAGD,IAAI,CAACE,KAAL,KAAe,CAAlB,EAAqB;AACjB,iBAAO,IAAP;AACH,SAFD,MAGK,OAAO,KAAP;AACJ,OALO,CAAZ;AAMI,aAAOP,SAAP;;AACR,SAAKlB,KAAK,CAAC0B,SAAX;AACIR,MAAAA,SAAS,GAAGD,QAAQ,CAACK,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACtC,YAAGD,IAAI,CAACI,IAAL,KAAc,CAAjB,EAAoB;AAChB,iBAAO,IAAP;AACH,SAFD,MAGK,OAAO,KAAP;AACJ,OALO,CAAZ;AAMI,aAAOT,SAAP;;AACR;AAAU,aAAOD,QAAP;AAnBd;AAqBH,CAzBD;;AA2BA,eAAeH,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes'\nimport config from './../config/index'\nimport axios from 'axios';\n\nlet initialState = []\naxios({\n    url: `${config.baseUrl}/api/get-all`,\n    method: 'get'\n    })\n    .then((response) => {\n        initialState = response.data.data;\n        \n    })\n    .catch((error) => {\n        console.log(error)\n    });\n\nlet myReducer = (state = initialState,action) => {\n\n    let newState = [...initialState];\n    let listArray = [...initialState];\n    switch(action.type){\n        case types.SHOW_ALL:\n            return newState;\n        case types.SHOW_MODEL:\n            listArray = newState.filter((item,index)=>{\n                if(item.model === 1) {\n                    return true\n                }  \n                else return false;\n                })\n                return listArray;\n        case types.SHOW_GOOD:\n            listArray = newState.filter((item,index)=>{\n                if(item.good === 1) {\n                    return true\n                }  \n                else return false;\n                })\n                return listArray;\n        default : return newState;\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}