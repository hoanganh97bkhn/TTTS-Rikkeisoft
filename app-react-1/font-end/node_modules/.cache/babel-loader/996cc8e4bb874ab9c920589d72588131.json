{"ast":null,"code":"var _jsxFileName = \"/home/thispc/Documents/TTS/app-react-1/font-end/src/components/helpers/ModalsFile.jsx\";\nimport React, { Component } from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Input, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport * as actions from './../../actions/index';\n\nclass ModalsFile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handeleFileChosen = e => {\n      let reader = new FileReader();\n      let file = e.target.files[0];\n      e.preventDefault();\n\n      reader.onloadend = () => {\n        this.setState({\n          fileimages: [...this.state.fileimages, file]\n        });\n      };\n\n      if (file) reader.readAsDataURL(file);\n    };\n\n    this.handleSubmit = e => {\n      let formData = new FormData();\n      this.state.fileimages.map((item, index) => formData.append('file', item, item.name));\n      formData.append('temp', this.props.temp);\n      this.props.handleSubmit(formData, this.props.url);\n    };\n\n    this.state = {\n      fileimages: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      isOpen: this.props.isOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.props.title), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"file\",\n      onChange: this.handeleFileChosen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Upload\"), React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.props.isToggleModalsFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"H\\u1EE7y\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isOpen: state.modalsFile.status,\n    title: state.modalsFile.title,\n    url: state.modalsFile.url,\n    temp: state.modalsFile.temp\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    isToggleModalsFile: () => {\n      dispatch(actions.modalsFile);\n    },\n    handleSubmit: (formData, url) => {\n      dispatch(actions.callApiUpload(formData, url));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalsFile);","map":{"version":3,"sources":["/home/thispc/Documents/TTS/app-react-1/font-end/src/components/helpers/ModalsFile.jsx"],"names":["React","Component","Modal","ModalHeader","ModalBody","ModalFooter","Input","Button","connect","actions","ModalsFile","constructor","props","handeleFileChosen","e","reader","FileReader","file","target","files","preventDefault","onloadend","setState","fileimages","state","readAsDataURL","handleSubmit","formData","FormData","map","item","index","append","name","temp","url","render","isOpen","toggleModal","title","isToggleModalsFile","mapStateToProps","modalsFile","status","mapDispatchToProps","dispatch","callApiUpload"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Modal, ModalHeader, ModalBody, ModalFooter,Input,Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport * as actions from './../../actions/index';\n\n\nclass ModalsFile extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            fileimages : [],\n        }\n    }\n\n    handeleFileChosen = (e) => {\n        let reader = new FileReader();\n        let file = e.target.files[0];\n        \n        e.preventDefault();\n        reader.onloadend = () => {\n            this.setState({\n                fileimages: [...this.state.fileimages, file],\n            });\n          }\n      \n        if(file) reader.readAsDataURL(file);\n    }\n\n    handleSubmit = (e) => {\n        let formData = new FormData();\n        this.state.fileimages.map((item, index) => (\n            formData.append('file', item, item.name)\n        ))\n            formData.append('temp',this.props.temp);\n        \n        this.props.handleSubmit(formData,this.props.url);\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal isOpen={this.props.isOpen}>\n                    <ModalHeader toggle={this.toggleModal}>{this.props.title}</ModalHeader>\n                    <ModalBody>\n                      <Input type=\"file\" onChange={this.handeleFileChosen}></Input>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"primary\" onClick={this.handleSubmit}>Upload</Button>\n                        <Button color=\"danger\" onClick={this.props.isToggleModalsFile}>Há»§y</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isOpen : state.modalsFile.status,\n        title : state.modalsFile.title,\n        url : state.modalsFile.url,\n        temp : state.modalsFile.temp,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        isToggleModalsFile : ()=>{\n            dispatch(actions.modalsFile)\n        },\n        handleSubmit : (formData,url)=>{\n            dispatch(actions.callApiUpload(formData,url));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalsFile);\n"]},"metadata":{},"sourceType":"module"}