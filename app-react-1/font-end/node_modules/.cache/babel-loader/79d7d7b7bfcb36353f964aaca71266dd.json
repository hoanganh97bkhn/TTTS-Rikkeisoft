{"ast":null,"code":"import _objectSpread from \"/home/thispc/Documents/TTS/app-react-1/font-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as types from './../constants/ActionTypes';\nimport config from './../config/index';\nimport axios from 'axios';\nlet initialState = [{\n  \"id\": 42,\n  \"model\": 1,\n  \"good\": 0\n}, {\n  \"id\": 41,\n  \"model\": 0,\n  \"good\": 1\n}, {\n  \"id\": 37,\n  \"model\": 1,\n  \"good\": 1\n}, {\n  \"id\": 27,\n  \"model\": 1,\n  \"good\": 0\n}, {\n  \"id\": 21,\n  \"model\": 0,\n  \"good\": 1\n}, {\n  \"id\": 20,\n  \"model\": 1,\n  \"good\": 1\n}, {\n  \"id\": 18,\n  \"model\": 0,\n  \"good\": 1\n}, {\n  \"id\": 1,\n  \"model\": 0,\n  \"good\": 1\n}];\n\nlet myReducer = (state = initialState, action) => {\n  const newState = _objectSpread({}, state);\n\n  switch (action.type) {\n    case types.SHOW_ALL:\n      newState = action.data;\n      return newState;\n\n    case types.SHOW_MODEL:\n      state = action.data.filter((item, index) => {\n        if (item.model === 1) {\n          return true;\n        } else return false;\n      });\n      return state;\n\n    case types.SHOW_GOOD:\n      state = action.data.filter((item, index) => {\n        if (item.good === 1) {\n          return true;\n        } else return false;\n      });\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/thispc/Documents/TTS/app-react-1/font-end/src/reducers/sort.js"],"names":["types","config","axios","initialState","myReducer","state","action","newState","type","SHOW_ALL","data","SHOW_MODEL","filter","item","index","model","SHOW_GOOD","good"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAIC,YAAY,GAAG,CACjB;AACI,QAAM,EADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CADiB,EAMjB;AACI,QAAM,EADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CANiB,EAWjB;AACI,QAAM,EADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CAXiB,EAgBjB;AACI,QAAM,EADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CAhBiB,EAqBjB;AACI,QAAM,EADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CArBiB,EA0BjB;AACI,QAAM,EADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CA1BiB,EA+BjB;AACI,QAAM,EADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CA/BiB,EAoCjB;AACI,QAAM,CADV;AAEI,WAAS,CAFb;AAGI,UAAQ;AAHZ,CApCiB,CAAnB;;AA2CA,IAAIC,SAAS,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAsBG,MAAtB,KAAiC;AAC7C,QAAMC,QAAQ,qBAAOF,KAAP,CAAd;;AAEA,UAAOC,MAAM,CAACE,IAAd;AACI,SAAKR,KAAK,CAACS,QAAX;AACIF,MAAAA,QAAQ,GAAGD,MAAM,CAACI,IAAlB;AACA,aAAOH,QAAP;;AACJ,SAAKP,KAAK,CAACW,UAAX;AACIN,MAAAA,KAAK,GAAGC,MAAM,CAACI,IAAP,CAAYE,MAAZ,CAAmB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACrC,YAAGD,IAAI,CAACE,KAAL,KAAe,CAAlB,EAAqB;AACjB,iBAAO,IAAP;AACH,SAFD,MAGK,OAAO,KAAP;AACJ,OALG,CAAR;AAMI,aAAOV,KAAP;;AACR,SAAKL,KAAK,CAACgB,SAAX;AACQX,MAAAA,KAAK,GAAGC,MAAM,CAACI,IAAP,CAAYE,MAAZ,CAAmB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACrC,YAAGD,IAAI,CAACI,IAAL,KAAc,CAAjB,EAAoB;AAClB,iBAAO,IAAP;AACD,SAFD,MAGK,OAAO,KAAP;AACN,OALK,CAAR;AAMA,aAAOZ,KAAP;;AACR;AAAU,aAAOA,KAAP;AApBd;AAsBH,CAzBD;;AA2BA,eAAeD,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes'\nimport config from './../config/index'\nimport axios from 'axios';\n\nlet initialState = [\n  {\n      \"id\": 42,\n      \"model\": 1,\n      \"good\": 0\n  },\n  {\n      \"id\": 41,\n      \"model\": 0,\n      \"good\": 1\n  },\n  {\n      \"id\": 37,\n      \"model\": 1,\n      \"good\": 1\n  },\n  {\n      \"id\": 27,\n      \"model\": 1,\n      \"good\": 0\n  },\n  {\n      \"id\": 21,\n      \"model\": 0,\n      \"good\": 1\n  },\n  {\n      \"id\": 20,\n      \"model\": 1,\n      \"good\": 1\n  },\n  {\n      \"id\": 18,\n      \"model\": 0,\n      \"good\": 1\n  },\n  {\n      \"id\": 1,\n      \"model\": 0,\n      \"good\": 1\n  }\n];\n\nlet myReducer = (state = initialState,action) => {\n    const newState = {...state};\n\n    switch(action.type){\n        case types.SHOW_ALL:\n            newState = action.data;\n            return newState;\n        case types.SHOW_MODEL:\n            state = action.data.filter((item,index)=>{\n                if(item.model === 1) {\n                    return true\n                }  \n                else return false;\n                })\n                return state;\n        case types.SHOW_GOOD:\n                state = action.data.filter((item,index)=>{\n                    if(item.good === 1) {\n                      return true\n                    }  \n                    else return false;\n                  })\n                return state;\n        default : return state;\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}