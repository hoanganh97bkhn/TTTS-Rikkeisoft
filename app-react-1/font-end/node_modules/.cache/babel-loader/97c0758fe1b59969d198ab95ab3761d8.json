{"ast":null,"code":"import * as types from './../constants/ActionTypes';\nimport config from './../config/index';\nimport axios from 'axios';\nimport { start } from 'repl';\nlet initialState = [];\n\nfunction* startData() {\n  yield axios({\n    url: \"\".concat(config.baseUrl, \"/api/get-all\"),\n    method: 'get'\n  }).then(response => {\n    initialState = response.data;\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nconsole.log(initialState);\n\nlet myReducer = (state = initialState, action) => {\n  start;\n  let newState = [...initialState];\n  let listArray = [...initialState];\n\n  switch (action.type) {\n    case types.SHOW_ALL:\n      console.log(state);\n      return newState;\n\n    case types.SHOW_MODEL:\n      console.log(state);\n      listArray = newState.filter((item, index) => {\n        if (item.model === 1) {\n          return true;\n        } else return false;\n      });\n      console.log(\"new\", state);\n      return listArray;\n\n    case types.SHOW_GOOD:\n      console.log(state);\n      listArray = newState.filter((item, index) => {\n        if (item.good === 1) {\n          return true;\n        } else return false;\n      });\n      return listArray;\n\n    default:\n      return newState;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/thispc/Documents/TTS/app-react-1/font-end/src/reducers/sort.js"],"names":["types","config","axios","start","initialState","startData","url","baseUrl","method","then","response","data","catch","error","console","log","myReducer","state","action","newState","listArray","type","SHOW_ALL","SHOW_MODEL","filter","item","index","model","SHOW_GOOD","good"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,MAAtB;AAEA,IAAIC,YAAY,GAAG,EAAnB;;AACI,UAAUC,SAAV,GAAsB;AAClB,QAAMH,KAAK,CAAC;AACRI,IAAAA,GAAG,YAAKL,MAAM,CAACM,OAAZ,iBADK;AAERC,IAAAA,MAAM,EAAE;AAFA,GAAD,CAAL,CAIDC,IAJC,CAIKC,QAAD,IAAc;AAChBN,IAAAA,YAAY,GAAGM,QAAQ,CAACC,IAAxB;AACH,GANC,EAODC,KAPC,CAOMC,KAAD,IAAW;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GATC,CAAN;AAUH;;AACLC,OAAO,CAACC,GAAR,CAAYX,YAAZ;;AACA,IAAIY,SAAS,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAsBc,MAAtB,KAAiC;AAC7Cf,EAAAA,KAAK;AACL,MAAIgB,QAAQ,GAAG,CAAC,GAAGf,YAAJ,CAAf;AACA,MAAIgB,SAAS,GAAG,CAAC,GAAGhB,YAAJ,CAAhB;;AACA,UAAOc,MAAM,CAACG,IAAd;AACI,SAAKrB,KAAK,CAACsB,QAAX;AACQR,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,aAAOE,QAAP;;AACR,SAAKnB,KAAK,CAACuB,UAAX;AACIT,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACAG,MAAAA,SAAS,GAAGD,QAAQ,CAACK,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACtC,YAAGD,IAAI,CAACE,KAAL,KAAe,CAAlB,EAAqB;AACjB,iBAAO,IAAP;AACH,SAFD,MAGK,OAAO,KAAP;AACJ,OALO,CAAZ;AAMIb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBE,KAAlB;AACA,aAAOG,SAAP;;AACR,SAAKpB,KAAK,CAAC4B,SAAX;AACQd,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACJG,MAAAA,SAAS,GAAGD,QAAQ,CAACK,MAAT,CAAgB,CAACC,IAAD,EAAMC,KAAN,KAAc;AACtC,YAAGD,IAAI,CAACI,IAAL,KAAc,CAAjB,EAAoB;AAChB,iBAAO,IAAP;AACH,SAFD,MAGK,OAAO,KAAP;AACJ,OALO,CAAZ;AAMI,aAAOT,SAAP;;AACR;AAAU,aAAOD,QAAP;AAvBd;AAyBH,CA7BD;;AA+BA,eAAeH,SAAf","sourcesContent":["import * as types from './../constants/ActionTypes'\nimport config from './../config/index'\nimport axios from 'axios';\nimport { start } from 'repl';\n\nlet initialState = []\n    function* startData (){\n        yield axios({\n            url: `${config.baseUrl}/api/get-all`,\n            method: 'get'\n            })\n            .then((response) => {\n                initialState = response.data;\n            })\n            .catch((error) => {\n                console.log(error)\n            });\n    }\nconsole.log(initialState)\nlet myReducer = (state = initialState,action) => {\n    start\n    let newState = [...initialState];\n    let listArray = [...initialState];\n    switch(action.type){\n        case types.SHOW_ALL:\n                console.log(state);\n                return newState;\n        case types.SHOW_MODEL:\n            console.log(state);\n            listArray = newState.filter((item,index)=>{\n                if(item.model === 1) {\n                    return true\n                }  \n                else return false;\n                })\n                console.log(\"new\",state);\n                return listArray;\n        case types.SHOW_GOOD:\n                console.log(state);\n            listArray = newState.filter((item,index)=>{\n                if(item.good === 1) {\n                    return true\n                }  \n                else return false;\n                })\n                return listArray;\n        default : return newState;\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}